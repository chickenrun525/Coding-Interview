RateLimiter
Memcached as storage system because it needs efficient read and write
Error type : 429
Could be OOD, or SD, if SD: different level storage, cannot be 100% accurate, look up by different time level storage
SD: similar to datadog, storage also by different time level. No need for memcached, use NoSQL

long polling, push, user based, geograph based and mixed hashing, pros and cons,
if a rider is assigned a driver, and the server really got the ack, why the rider does not know he is assigned....
这个问题最后回到的是rate limiting,要求写一个Mt 的rate limiter
Mt 的rate limiter => 什么是MT ? multi-threaded safe circular buffer

两个问题：
1）这个ratelimiter是global limiter吧？也就是说不是针对IP level的而是global traffic的
2）MT不就是用读写锁么？难道还有什么花样？

是global limiter
是在push/pop的时候 用个简单的lock
但是这里就是肯定要用circular buffer了，而不是queue

第三轮一个三哥，看起来很睿智的样子。先是上来扯了半天他的工作，然后让写一个rate limiter。我心想先写一个fixed size array实现的吧，follow up我再用token bucket。
当时写完有一个小bug不过也很快改好。准备改成token bucket时没想到三哥说这个work well for him不用再优化了（exo me？）
然后开始放大招，要把这个设计成distributed system的版本。大概就是后面有个服务收费很贵，所以要限制调用的频率和次数，

To answer this question, ask him if it is possible to use fixed window, if not, explaining why sliding window is expensive,
Then tell him combo saves a lots of operation, saves a lot of money.

然后前面有一堆rate limiter需要共同调用这个服务，如何来设计这个分布式的系统。中间各种follow up给我问的中途沉默，
所以当时就一个感觉这轮跪了，惨

To answer this part, data sharding by consistent hashing, based on "user id".
To take care of latency, write back cache, periodically write to storage, most of time update cache first. LRU is the cache eviction policy.

Structure: user ---> web server ---->rate limiter ----{backend storage, cache server}
                        |
                        |
                        |
                    API server
Some thoughts: the API could be on multiple machines(server), not on one machine. So thread-safe is a potential point in SD Design
Fixed Window algo is so simple, probably not in the interview, rolling window algorithm is what we need.
Fixed Window algo O(1) space is enough, only need to count the occurance and starting time.
In a distributed system, rolling window needs Redis Sorted set, while mix fixed window and rolling window needs Redis Hash.

Atomicity: Redis lock will add extra expense. Mecached has complications.

Filter by IP: block some good guys sharing the same gateway, by user: might let hacker block the normal use of a good guy by reaching the trial limit.

TODO: write thread-safe part and circular array part.
